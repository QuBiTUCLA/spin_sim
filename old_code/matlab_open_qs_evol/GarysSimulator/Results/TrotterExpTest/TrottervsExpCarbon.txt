clear all;

% %Load Settings
GrapeSettings;

%% Loading propagator

%Prepare propagator
params.maxpLength = 100;

%% Start Expm vs Trotter expansion Test
control{1} = HnatData.expandOperator('NV',NV.Sx);

maxSpin = 7;
maxtrial = 5;
CPUtimeTrot = zeros(maxSpin+1,1);
CPUtimeExp = zeros(maxSpin+1,1);
TrotterError = zeros(maxSpin+1,1);

for spinNum = 0:maxSpin
    spinNum
    
    LauncherHamiltonian(params.NVSpinNumber,spinNum,8);
    load('HnatData.mat') %Hamiltonian from simulator, variable HnatData
    
    clear propagator
    propagator = PropagatorObj();
    propagator.TimeStep = params.timeStep;
    propagator.TimeLength = params.maxpLength;
    
    maxHnatValues = 1/(100*params.timeStep*params.maxpLength);
    HnatData.RotatingMatrix(abs(HnatData.RotatingMatrix) < maxHnatValues) = 0;
    %Above line for good sparse matrix, kill off too slow values
    propagator.Hnat = sparse(HnatData.RotatingMatrix);
    
    params.ControlMats{1} = HnatData.expandOperator('NV',NV.Sx);
    for i=1:length(params.ControlMats)
        propagator.ControlMats{i} = sparse(params.ControlMats{i});
    end
    NV = Spin(params.NVSpinNumber);

    propagator.precalculation(2^5);
    
    for trial = 1:maxtrial
        trial

        currentPulse = PulseObj([length(propagator.ControlMats) params.maxpLength]);
        currentPulse.Pulse = currentPulse.makeRandomPulse(0.1,params.maxPower);
        propagator.ControlFields = currentPulse;

        tic
        Utrot=propagator.unitary();
        CPUtimeTrot(spinNum+1)=CPUtimeTrot(spinNum+1)+toc;

        tic
        Uexp=propagator.unitary2();
        CPUtimeExp(spinNum+1)=CPUtimeExp(spinNum+1)+toc; 
        
        opEnd = 1;
        for ct=1:length(Uexp)
            opEnd = Uexp{ct}*opEnd; %opEnd is the full propagator not just at time N
        end
        opEndTrot = 1;
        for ct=1:length(Utrot)
            opEndTrot = Utrot{ct}*opEndTrot; %opEnd is the full propagator not just at time N
        end
        err = (1-abs(trace(opEnd'*opEndTrot/length(opEndTrot))))^2;
        TrotterError(spinNum+1)= TrotterError(spinNum+1) + log(err);
        
    end
    
end
CPUtimeTrot = CPUtimeTrot/maxtrial;
CPUtimeExp = CPUtimeExp/maxtrial;
TrotterError = TrotterError/maxtrial;

plot(0:maxSpin,CPUtimeTrot,'r',0:maxSpin,CPUtimeExp,'b')
